var xe=Object.defineProperty;var t=(e,r)=>xe(e,"name",{value:r,configurable:!0});var a=t((e,r="str")=>{if(typeof e!="string")throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (String)`);return!0},"checkstr"),c=t((e,r,o=!0)=>{if(typeof e!="number")throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (Number)`);if(!Number.isInteger(e)||e<=(o?-1:0))throw new TypeError(`str: ${r} is (${e}), expected positive integer`)},"checkpInt"),l=t((e,r)=>{if(typeof e!="number")throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (Number)`);if(!Number.isInteger(e))throw new TypeError(`str: ${r} is (${e}), expected integer`)},"checkint"),h=t((e,r="fn")=>{if(typeof e!="function")throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (Function)`)},"checkfn"),w=t((e,r)=>{if(typeof e!="string"&&!(e instanceof RegExp))throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (String) or (RegExp)`)},"checkstrReg");var C=t((e,r=!1)=>(a(e),r?Array.from(e):e.split("")),"chars"),d=t((e,r=!1)=>(a(e),(r?Array.from(e):e.split("")).map(o=>o.codePointAt(0))),"codePoints"),i=t((e,r=!1)=>(a(e),e.trim().split(r?/[\s_-]+|(?=[A-Z])/g:/\s+/)),"words"),g=t(e=>(a(e),e.split(`
`)),"lines"),$=t((e,r)=>{a(e),c(r,"max",!1);for(var o=[],p=0,n=0;;){if(p+=r,p>e.length)return o.push(e.slice(n)),o;if(p=e.lastIndexOf(" ",p),p<=n&&(p=e.indexOf(" ",n+r)),o.push(e.slice(n,p===-1?e.length:p)),p===-1)return o;p++,n=p}},"splitLinesAt");var k=t((e,r)=>(a(e),c(r,"length",!1),e.slice(0,r)),"first"),y=t((e,r)=>(a(e),c(r,"length",!1),e.slice(-r)),"last"),x=t((e,r=0,o=e?.length,p=!0,n=!0)=>{a(e),l(r,"start"),l(o,"end");var s=e.length;r=r<0?r+s:r,r=Math.max(0,Math.min(r,s)),o=o<0?o+s:o,o=Math.max(0,Math.min(o,s));var u=r===0?0:p?e.lastIndexOf(" ",r):e.indexOf(" ",r),v=o===s?s:n?e.indexOf(" ",o):e.lastIndexOf(" ",o);return u===-1&&(u=p?0:s),v===-1&&(v=n?s:0),e.slice(u?u+1:0,v)},"sliceWords");var R=t((e,r,o="...")=>(a(e),c(r,"length",!1),a(o,"end"),r=Math.max(0,r-o.length),e.length>r?e.slice(0,r)+o:e),"truncate"),L=t((e,r,o="...")=>(a(e),c(r,"length",!1),a(o,"end"),r=Math.max(0,r-o.length),e.length>r?x(e,0,r,!0,!1)+o:e),"prune");var A=t((e,r)=>(a(e),w(r,"pattern"),e.split(r).length),"count"),E=t((e,r=!1)=>(a(e),(r?Array.from(e):e.split("")).reverse().join("")),"reverse"),M=t((e,r=0,o=e?.length,p="")=>(a(e),l(r,"start"),l(o,"end"),a(p,"toAdd"),e.slice(0,r)+p+e.slice(o)),"splice"),T=t((e,r=0,o="")=>(a(e),l(r,"position"),a(o,"toAdd"),e.slice(0,r)+o+e.slice(r)),"insert");var j=t((e,r)=>(a(e),a(r,"prefix"),e.startsWith(r)?e.slice(r.length):e),"removePrefix"),I=t((e,r)=>(a(e),a(r,"suffix"),e.endsWith(r)?e.slice(0,-r.length):e),"removeSuffix"),O=t((e,r)=>(a(e),a(r,"prefix"),e.startsWith(r)?e:r+e),"addPrefix"),U=t((e,r)=>(a(e),a(r,"suffix"),e.endsWith(r)?e:e+r),"addSuffix");var N=t(e=>e[0].toUpperCase()+e.slice(1).toLowerCase(),"_capitalize"),ve=t((e,r)=>r===0?e.toLowerCase():e[0].toUpperCase()+e.slice(1).toLowerCase(),"camelize"),fe=t((e,r)=>r===0?e[0].toUpperCase()+e.slice(1).toLowerCase():e.toLowerCase(),"sentencize"),P=t(e=>(a(e),e[0].toUpperCase()+e.slice(1).toLowerCase()),"capitalize"),z=t((e,r,o=" ")=>(a(e),h(r,"mapper"),a(o,"join"),i(e,!0).map(r).join(o)),"convCase"),W=t(e=>i(e,!0).map(ve).join(""),"camelCase"),b=t(e=>i(e,!0).map(N).join(""),"pascalCase"),H=t(e=>i(e,!0).join("_").toLowerCase(),"snakeCase"),S=t(e=>i(e,!0).join("_").toUpperCase(),"constantCase"),_=t(e=>i(e,!0).join("-").toLowerCase(),"kebabCase"),B=t(e=>i(e,!0).join("_").toUpperCase(),"trainCase"),q=t(e=>i(e,!0).map(N).join(" "),"titleCase"),F=t(e=>i(e,!0).map(fe).join(" "),"sentenceCase"),Z=t(e=>i(e,!0).join(" ").toLowerCase(),"lowerCase"),D=t(e=>i(e,!0).join(" ").toUpperCase(),"upperCase");var G=t((e,r)=>r===void 0?(a(e,"match"),r=new RegExp("^["+e+"]+$"),o=>a(o)&&r.test(o)):(a(e),a(r,"match"),new RegExp("^["+r+"]+$").test(e)),"containsOnly"),J=t((e,r)=>r===void 0?(a(e,"match"),r=new RegExp("^[^"+e+"]+$"),o=>a(o)&&r.test(o)):(a(e),a(r,"match"),new RegExp("^[^"+r+"]+$").test(e)),"containsNot"),me=/^[a-zA-Z]+$/,he=/^[a-z]+$/,we=/^[A-Z]+$/,Ce=/^\w+$/,de=/^\d+$/,K=/^\s+$/,ge=/^[!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]+$/,$e=/^[+-]?\d+$/,ke=/^[+-]?\d*\.?\d+(?:[eE][+-]?\d+)?$/,ye=/^[+-]?(?:0b)?[01]+$/,Re=/^[+-]?(?:0o)?[0-7]+$/,Le=/^[+-]?(?:0x)?[0-9a-fA-F]+$/,Q=t(e=>a(e)&&me.test(e),"isAlpha"),V=t(e=>a(e)&&he.test(e),"isAlphaLower"),X=t(e=>a(e)&&we.test(e),"isAlphaUpper"),Y=t(e=>a(e)&&Ce.test(e),"isAlphaNumerial"),ee=t(e=>a(e)&&de.test(e),"isDigit"),re=t(e=>a(e)&&K.test(e),"isWhitespace"),te=t(e=>a(e)&&(e===""||K.test(e)),"isBlank"),ae=t(e=>a(e)&&ge.test(e),"isPunctuation"),oe=t(e=>a(e)&&$e.test(e),"isInt"),pe=t(e=>a(e)&&ke.test(e),"isFloat"),ie=t(e=>a(e)&&ye.test(e),"isBin"),ne=t(e=>a(e)&&Re.test(e),"isOcta"),se=t(e=>a(e)&&Le.test(e),"isHex");var Ae={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Ee={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},ce=t(e=>(a(e),e.replace(/&<>'"/g,r=>Ae[r])),"escapeHTML"),le=t(e=>(a(e),e.replace(/&amp|&lt|&gt|&quot|&#39/g,r=>Ee[r])),"unescapeHTML"),ue=t(e=>(a(e),e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")),"escapeRegExp");var Me=t(()=>{var e=t(r=>function(...o){return r(this,...o)},"handle");for(let r in f)Object.defineProperty(String.prototype,"$"+r,{value:e(f[r]),enumerable:!1})},"extendNative"),f={chars:C,codePoints:d,words:i,lines:g,splitLinesAt:$,first:k,last:y,sliceWords:x,truncate:R,prune:L,count:A,reverse:E,splice:M,insert:T,addPrefix:O,addSuffix:U,removePrefix:j,removeSuffix:I,capitalize:P,convCase:z,camelCase:W,pascalCase:b,snakeCase:H,constantCase:S,kebabCase:_,trainCase:B,titleCase:q,sentenceCase:F,lowerCase:Z,upperCase:D,containsOnly:G,containsNot:J,isAlpha:Q,isAlphaLower:V,isAlphaUpper:X,isAlphaNumerial:Y,isDigit:ee,isWhitespace:re,isBlank:te,isPunctuation:ae,isInt:oe,isFloat:pe,isBin:ie,isOcta:ne,isHex:se,escapeHTML:ce,unescapeHTML:le,escapeRegExp:ue,extendNative:Me},m=f;globalThis.$str=m;var mr=m;export{O as addPrefix,U as addSuffix,W as camelCase,P as capitalize,C as chars,d as codePoints,S as constantCase,J as containsNot,G as containsOnly,z as convCase,A as count,mr as default,ce as escapeHTML,ue as escapeRegExp,Me as extendNative,k as first,T as insert,Q as isAlpha,V as isAlphaLower,Y as isAlphaNumerial,X as isAlphaUpper,ie as isBin,te as isBlank,ee as isDigit,pe as isFloat,se as isHex,oe as isInt,ne as isOcta,ae as isPunctuation,re as isWhitespace,_ as kebabCase,y as last,g as lines,Z as lowerCase,b as pascalCase,L as prune,j as removePrefix,I as removeSuffix,E as reverse,F as sentenceCase,x as sliceWords,H as snakeCase,M as splice,$ as splitLinesAt,q as titleCase,B as trainCase,R as truncate,le as unescapeHTML,D as upperCase,i as words};
