var b=Object.defineProperty;var s=(r,e)=>b(r,"name",{value:e,configurable:!0});var $=s((r,e)=>{if(typeof r!="string")throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (String)`)},"checkstr"),x=s((r,e)=>{if(!Array.isArray(r))throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (Array)`)},"checkarr");var R=s((r,e)=>{if(typeof r!="string"&&!(r instanceof RegExp))throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (String) or (RegExp)`)},"checkstrReg"),g=class extends Error{constructor(e){this.name="csv",this.message=e}};s(g,"CSVError");var E=[",",";","|","	","^"],k=s(r=>new RegExp(`(?:[^${r}
\r]+|(?:${r}(?:${r}${r}|[^${r}])*${r}))+`,"g"),"lineMatcher"),M=s((r,e)=>new RegExp(`(?:[^${r}${e}]+|(?:${e}(?:${e}${e}|[^${e}])*${e}))+`,"g"),"cellMatcher"),w=Symbol("auto"),j=s(r=>{var e=E.map(a=>Math.min(...r.map(t=>t.split(a).length))),[i,d]=e.reduce(([a,t],p,f)=>p>t?[f,p]:[a,t],[0,0]);return E[i]},"detectSeparator"),A=s((r,e,i)=>(r=String(r),r.match(i)?`${e}${r.replaceAll(e,e+e)}${e}`:r),"encodeCell"),S=s((r,e={})=>{var{separator:i,lineEnd:d,quote:a}={separator:",",lineEnd:`\r
`,quote:'"',...e};x(r,"data"),$(i,"separator"),$(d,"lineEnd"),$(a,"quote");var t=new RegExp("["+d+i+a+"]"),p=Array.isArray(r[0])?!1:Object.keys(r[0]),f=p?p.map(h=>A(h,a,t)).join(i)+d:"",y=r.map(h=>(p&&(h=p.map(o=>h?.[o])),h.map(o=>A(o,a,t)).join(i))).join(d);return f+y},"encode"),T=s((r,e={})=>{var{separator:i,lineEnd:d,quote:a,headers:t,trim:p,cast:f,throwLengthNotEqual:y}={separator:w,lineEnd:"",quote:'"',headers:!0,trim:!1,cast:!0,throwLengthNotEqual:!0,...e};$(r,"data"),i!==w&&$(i,"separator"),R(d,"lineEnd"),$(a,"quote"),t!==!0&&t!==!1&&x(t,"headers"),f!==!0&&f!==!1&&x(f,"cast");var h=d||k(a),o=r.match(h);i===w&&(i=j(o));var N=M(i,a);return o=o.map(u=>u.match(N).map(c=>(p&&(c=c.trim()),c[0]===a&&(c=c.slice(1,-1).replaceAll(a+a,a)),c))),t===!0&&(t=o[0],o=o.slice(1)),o.map((u,c)=>{if(t&&t.length!==u.length&&y)throw new g(`line (${c}) of length (${u.length}), expected (${t.length})`);return Array.isArray(f)?u=u.map((n,v)=>{var m=f[v];if(m==="string")return n;if(m==="number")return Number(n);if(n==="true")return!0;if(n==="false")return!1;if(n!=="undefined"){if(n==="null")return null;if(m==="date")return new Date(n);if(m==="json")return JSON.parse(n);throw new g(`undefined casting type (${m})`)}}):f&&(u=u.map(n=>{if(n==="true")return!0;if(n==="false")return!1;if(n!=="undefined"){if(n==="null")return null;var v=Number(n);return Number.isNaN(v)?n:v}})),t&&(u=u.reduce((n,v,m)=>(n[t[m]]=v,n),{})),u})},"decode"),O={encode:S,decode:T};export{g as CSVError,R as checkstrReg,T as decode,O as default,S as encode};
