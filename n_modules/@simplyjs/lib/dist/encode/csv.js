var b=Object.defineProperty;var u=(r,e)=>b(r,"name",{value:e,configurable:!0});var $=u((r,e)=>{if(typeof r!="string")throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (String)`)},"checkstr"),x=u((r,e)=>{if(!Array.isArray(r))throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (Array)`)},"checkarr");var R=u((r,e)=>{if(typeof r!="string"&&!(r instanceof RegExp))throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (String) or (RegExp)`)},"checkstrReg"),g=class extends Error{constructor(e){this.name="csv",this.message=e}};u(g,"CSVError");var E=[",",";","|","	","^"],k=u(r=>new RegExp(`(?:[^${r}
\r]+|(?:${r}(?:${r}${r}|[^${r}])*${r}))+`,"g"),"lineMatcher"),M=u((r,e)=>new RegExp(`(?:[^${r}${e}]+|(?:${e}(?:${e}${e}|[^${e}])*${e}))+`,"g"),"cellMatcher"),w=Symbol("auto"),j=u(r=>{var e=E.map(n=>Math.min(...r.map(t=>t.split(n).length))),[o,c]=e.reduce(([n,t],p,f)=>p>t?[f,p]:[n,t],[0,0]);return E[o]},"detectSeparator"),A=u((r,e,o)=>(r=String(r),r.match(o)?`${e}${r.replaceAll(e,e+e)}${e}`:r),"encodeCell"),S=u((r,e={})=>{var{separator:o,lineEnd:c,quote:n}={separator:",",lineEnd:`\r
`,quote:'"',...e};x(r,"data"),$(o,"separator"),$(c,"lineEnd"),$(n,"quote");var t=new RegExp("["+c+o+n+"]"),p=Array.isArray(r[0])?!1:Object.keys(r[0]),f=p?p.map(d=>A(d,n,t)).join(o)+c:"",y=r.map(d=>(p&&(d=p.map(i=>d?.[i])),d.map(i=>A(i,n,t)).join(o))).join(c);return f+y},"encode"),T=u((r,e={})=>{var{separator:o,lineEnd:c,quote:n,headers:t,trim:p,cast:f,throwLengthNotEqual:y}={separator:w,lineEnd:"",quote:'"',headers:!0,trim:!1,cast:!0,throwLengthNotEqual:!0,...e};$(r,"data"),o!==w&&$(o,"separator"),R(c,"lineEnd"),$(n,"quote"),t!==!0&&t!==!1&&x(t,"headers"),f!==!0&&f!==!1&&x(f,"cast");var d=c||k(n),i=r.match(d);o===w&&(o=j(i));var N=M(o,n);return i=i.map(s=>s.match(N).map(h=>(p&&(h=h.trim()),h[0]===n&&(h=h.slice(1,-1).replaceAll(n+n,n)),h))),t===!0&&(t=i[0],i=i.slice(1)),i.map((s,h)=>{if(t&&t.length!==s.length&&y)throw new g(`line (${h}) of length (${s.length}), expected (${t.length})`);return Array.isArray(f)?s=s.map((a,v)=>{var m=f[v];if(m==="string")return a;if(m==="number")return Number(a);if(a==="true")return!0;if(a==="false")return!1;if(a!=="undefined"){if(a==="null")return null;if(m==="date")return new Date(a);if(m==="json")return JSON.parse(a);throw new g(`undefined casting type (${m})`)}}):f&&(s=s.map(a=>{if(a==="true")return!0;if(a==="false")return!1;if(a!=="undefined"){if(a==="null")return null;var v=Number(a);return Number.isNaN(v)?a:v}})),t&&(s=s.reduce((a,v,m)=>(a[t[m]]=v,a),{})),s})},"decode"),O={encode:S,decode:T};export{g as CSVError,R as checkstrReg,T as decode,O as default,S as encode};
