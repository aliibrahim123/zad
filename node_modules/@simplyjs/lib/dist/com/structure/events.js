var c=Object.defineProperty;var n=(r,e)=>c(r,"name",{value:e,configurable:!0});var i=n((r,e)=>{if(typeof r!="string")throw new TypeError(`events: ${e} of type (${r?.constructor?.name}), expected (String)`)},"checkstr"),f=n((r,e)=>{if(typeof r!="function")throw new TypeError(`events: ${e} of type (${r?.constructor?.name}), expected (Function)`)},"checkfn"),d=n((r,e)=>{if(!Array.isArray(r))throw new TypeError(`events: ${e} of type (${r?.constructor?.name}), expected (Array)`)},"checkarr"),o=class{constructor(e={},t={}){this.opts={addUndifined:!0,...e},this.events={};for(let s in t)this.add(s),d(t[s],"listners"),t[s].forEach(h=>this.on(s,h))}add(e){if(i(e,"name"),e in this.events)throw new ReferenceError(`events: adding defined event (${e})`);return this.events[e]=[],this}has(e){return i(e,"name"),e in this.events}on(e,t){if(typeof e=="object"){for(let s in e)this.on(s,e[s]);return this}if(i(e,"name"),f(t,"listner"),e in this.events)this.events[e].push(t);else if(this.opts.addUndifined)this.events[e]=[t];else throw new ReferenceError(`events: undefined event (${e})`);return this}off(e,t){if(i(e,"name"),f(t,"listner"),e in this.events)t?this.events[e].splice(this.events[e].indexOf(t),1):this.events[e]=[];else throw new ReferenceError(`events: undefined event (${e})`);return this}once(e,t){i(e,"name"),f(t,"listner");var s=n((...h)=>{t(...h),this.off(e,s)},"onceFn");return this.on(e,s)}trigger(e,...t){if(i(e,"name"),e in this.events)this.events[e].forEach(s=>s(...t));else throw new ReferenceError(`events: undefined event (${e})`);return this}};n(o,"EventEmmiter");var p=n((r,e)=>new o(r,e),"default");export{o as EventEmmiter,d as checkarr,f as checkfn,i as checkstr,p as default};
