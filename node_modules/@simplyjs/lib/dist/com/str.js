var ue=Object.defineProperty;var t=(e,r)=>ue(e,"name",{value:r,configurable:!0});var a=t((e,r="str")=>{if(typeof e!="string")throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (String)`);return!0},"checkstr"),s=t((e,r,o=!0)=>{if(typeof e!="number")throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (Number)`);if(!Number.isInteger(e)||e<=(o?-1:0))throw new TypeError(`str: ${r} is (${e}), expected positive integer`)},"checkpInt"),l=t((e,r)=>{if(typeof e!="number")throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (Number)`);if(!Number.isInteger(e))throw new TypeError(`str: ${r} is (${e}), expected integer`)},"checkint"),m=t((e,r="fn")=>{if(typeof e!="function")throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (Function)`)},"checkfn"),h=t((e,r)=>{if(typeof e!="string"&&!(e instanceof RegExp))throw new TypeError(`str: ${r} of type (${e?.constructor?.name}), expected (String) or (RegExp)`)},"checkstrReg");var w=t((e,r=!1)=>(a(e),r?Array.from(e):e.split("")),"chars"),C=t((e,r=!1)=>(a(e),(r?Array.from(e):e.split("")).map(o=>o.codePointAt(0))),"codePoints"),i=t((e,r=!1)=>(a(e),e.trim().split(r?/[\s_-]+|(?=[A-Z])/g:/\s+/)),"words"),d=t(e=>(a(e),e.split(`
`)),"lines"),g=t((e,r)=>{a(e),s(r,"max",!1);for(var o=[],p=0,n=0;;){if(p+=r,p>e.length)return o.push(e.slice(n)),o;if(p=e.lastIndexOf(" ",p),p<=n&&(p=e.indexOf(" ",n+r)),o.push(e.slice(n,p===-1?e.length:p)),p===-1)return o;p++,n=p}},"splitLinesAt");var $=t((e,r)=>(a(e),s(r,"length",!1),e.slice(0,r)),"first"),k=t((e,r)=>(a(e),s(r,"length",!1),e.slice(-r)),"last"),v=t((e,r=0,o=e?.length,p=!0,n=!0)=>{a(e),l(r,"start"),l(o,"end");var c=e.length;r=r<0?r+c:r,r=Math.max(0,Math.min(r,c)),o=o<0?o+c:o,o=Math.max(0,Math.min(o,c));var u=r===0?0:p?e.lastIndexOf(" ",r):e.indexOf(" ",r),x=o===c?c:n?e.indexOf(" ",o):e.lastIndexOf(" ",o);return u===-1&&(u=p?0:c),x===-1&&(x=n?c:0),e.slice(u?u+1:0,x)},"sliceWords");var y=t((e,r,o="...")=>(a(e),s(r,"length",!1),a(o,"end"),r=Math.max(0,r-o.length),e.length>r?e.slice(0,r)+o:e),"truncate"),R=t((e,r,o="...")=>(a(e),s(r,"length",!1),a(o,"end"),r=Math.max(0,r-o.length),e.length>r?v(e,0,r,!0,!1)+o:e),"prune");var L=t((e,r)=>(a(e),h(r,"pattern"),e.split(r).length),"count"),A=t((e,r=!1)=>(a(e),(r?Array.from(e):e.split("")).reverse().join("")),"reverse"),E=t((e,r=0,o=e?.length,p="")=>(a(e),l(r,"start"),l(o,"end"),a(p,"toAdd"),e.slice(0,r)+p+e.slice(o)),"splice"),M=t((e,r=0,o="")=>(a(e),l(r,"position"),a(o,"toAdd"),e.slice(0,r)+o+e.slice(r)),"insert");var j=t((e,r)=>(a(e),a(r,"prefix"),e.startsWith(r)?e.slice(r.length):e),"removePrefix"),T=t((e,r)=>(a(e),a(r,"suffix"),e.endsWith(r)?e.slice(0,-r.length):e),"removeSuffix"),I=t((e,r)=>(a(e),a(r,"prefix"),e.startsWith(r)?e:r+e),"addPrefix"),O=t((e,r)=>(a(e),a(r,"suffix"),e.endsWith(r)?e:e+r),"addSuffix");var U=t(e=>e[0].toUpperCase()+e.slice(1).toLowerCase(),"_capitalize"),ve=t((e,r)=>r===0?e.toLowerCase():e[0].toUpperCase()+e.slice(1).toLowerCase(),"camelize"),xe=t((e,r)=>r===0?e[0].toUpperCase()+e.slice(1).toLowerCase():e.toLowerCase(),"sentencize"),N=t(e=>(a(e),e[0].toUpperCase()+e.slice(1).toLowerCase()),"capitalize"),P=t((e,r,o=" ")=>(a(e),m(r,"mapper"),a(o,"join"),i(e,!0).map(r).join(o)),"convCase"),z=t(e=>i(e,!0).map(ve).join(""),"camelCase"),W=t(e=>i(e,!0).map(U).join(""),"pascalCase"),H=t(e=>i(e,!0).join("_").toLowerCase(),"snakeCase"),b=t(e=>i(e,!0).join("_").toUpperCase(),"constantCase"),S=t(e=>i(e,!0).join("-").toLowerCase(),"kebabCase"),_=t(e=>i(e,!0).join("_").toUpperCase(),"trainCase"),B=t(e=>i(e,!0).map(U).join(" "),"titleCase"),q=t(e=>i(e,!0).map(xe).join(" "),"sentenceCase"),F=t(e=>i(e,!0).join(" ").toLowerCase(),"lowerCase"),Z=t(e=>i(e,!0).join(" ").toUpperCase(),"upperCase");var D=t((e,r)=>r===void 0?(a(e,"match"),r=new RegExp("^["+e+"]+$"),o=>a(o)&&r.test(o)):(a(e),a(r,"match"),new RegExp("^["+r+"]+$").test(e)),"containsOnly"),G=t((e,r)=>r===void 0?(a(e,"match"),r=new RegExp("^[^"+e+"]+$"),o=>a(o)&&r.test(o)):(a(e),a(r,"match"),new RegExp("^[^"+r+"]+$").test(e)),"containsNot"),fe=/^[a-zA-Z]+$/,me=/^[a-z]+$/,he=/^[A-Z]+$/,we=/^\w+$/,Ce=/^\d+$/,J=/^\s+$/,de=/^[!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]+$/,ge=/^[+-]?\d+$/,$e=/^[+-]?\d*\.?\d+(?:[eE][+-]?\d+)?$/,ke=/^[+-]?(?:0b)?[01]+$/,ye=/^[+-]?(?:0o)?[0-7]+$/,Re=/^[+-]?(?:0x)?[0-9a-fA-F]+$/,K=t(e=>a(e)&&fe.test(e),"isAlpha"),Q=t(e=>a(e)&&me.test(e),"isAlphaLower"),V=t(e=>a(e)&&he.test(e),"isAlphaUpper"),X=t(e=>a(e)&&we.test(e),"isAlphaNumerial"),Y=t(e=>a(e)&&Ce.test(e),"isDigit"),ee=t(e=>a(e)&&J.test(e),"isWhitespace"),re=t(e=>a(e)&&(e===""||J.test(e)),"isBlank"),te=t(e=>a(e)&&de.test(e),"isPunctuation"),ae=t(e=>a(e)&&ge.test(e),"isInt"),oe=t(e=>a(e)&&$e.test(e),"isFloat"),pe=t(e=>a(e)&&ke.test(e),"isBin"),ie=t(e=>a(e)&&ye.test(e),"isOcta"),ne=t(e=>a(e)&&Re.test(e),"isHex");var Le={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Ae={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},ce=t(e=>(a(e),e.replace(/&<>'"/g,r=>Le[r])),"escapeHTML"),se=t(e=>(a(e),e.replace(/&amp|&lt|&gt|&quot|&#39/g,r=>Ae[r])),"unescapeHTML"),le=t(e=>(a(e),e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")),"escapeRegExp");var Ee=t(()=>{var e=t(r=>function(...o){return r(this,...o)},"handle");for(let r in f)Object.defineProperty(String.prototype,"$"+r,{value:e(f[r]),enumerable:!1})},"extendNative"),f={chars:w,codePoints:C,words:i,lines:d,splitLinesAt:g,first:$,last:k,sliceWords:v,truncate:y,prune:R,count:L,reverse:A,splice:E,insert:M,addPrefix:I,addSuffix:O,removePrefix:j,removeSuffix:T,capitalize:N,convCase:P,camelCase:z,pascalCase:W,snakeCase:H,constantCase:b,kebabCase:S,trainCase:_,titleCase:B,sentenceCase:q,lowerCase:F,upperCase:Z,containsOnly:D,containsNot:G,isAlpha:K,isAlphaLower:Q,isAlphaUpper:V,isAlphaNumerial:X,isDigit:Y,isWhitespace:ee,isBlank:re,isPunctuation:te,isInt:ae,isFloat:oe,isBin:pe,isOcta:ie,isHex:ne,escapeHTML:ce,unescapeHTML:se,escapeRegExp:le,extendNative:Ee},ur=f;export{I as addPrefix,O as addSuffix,z as camelCase,N as capitalize,w as chars,C as codePoints,b as constantCase,G as containsNot,D as containsOnly,P as convCase,L as count,ur as default,ce as escapeHTML,le as escapeRegExp,Ee as extendNative,$ as first,M as insert,K as isAlpha,Q as isAlphaLower,X as isAlphaNumerial,V as isAlphaUpper,pe as isBin,re as isBlank,Y as isDigit,oe as isFloat,ne as isHex,ae as isInt,ie as isOcta,te as isPunctuation,ee as isWhitespace,S as kebabCase,k as last,d as lines,F as lowerCase,W as pascalCase,R as prune,j as removePrefix,T as removeSuffix,A as reverse,q as sentenceCase,v as sliceWords,H as snakeCase,E as splice,g as splitLinesAt,B as titleCase,_ as trainCase,y as truncate,se as unescapeHTML,Z as upperCase,i as words};
