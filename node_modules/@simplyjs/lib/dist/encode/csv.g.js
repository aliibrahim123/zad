var R=Object.defineProperty;var u=(r,e)=>R(r,"name",{value:e,configurable:!0});var $=u((r,e)=>{if(typeof r!="string")throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (String)`)},"checkstr"),w=u((r,e)=>{if(!Array.isArray(r))throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (Array)`)},"checkarr");var k=u((r,e)=>{if(typeof r!="string"&&!(r instanceof RegExp))throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (String) or (RegExp)`)},"checkstrReg"),g=class extends Error{constructor(e){this.name="csv",this.message=e}};u(g,"CSVError");var A=[",",";","|","	","^"],M=u(r=>new RegExp(`(?:[^${r}
\r]+|(?:${r}(?:${r}${r}|[^${r}])*${r}))+`,"g"),"lineMatcher"),T=u((r,e)=>new RegExp(`(?:[^${r}${e}]+|(?:${e}(?:${e}${e}|[^${e}])*${e}))+`,"g"),"cellMatcher"),x=Symbol("auto"),j=u(r=>{var e=A.map(n=>Math.min(...r.map(t=>t.split(n).length))),[o,d]=e.reduce(([n,t],p,f)=>p>t?[f,p]:[n,t],[0,0]);return A[o]},"detectSeparator"),b=u((r,e,o)=>(r=String(r),r.match(o)?`${e}${r.replaceAll(e,e+e)}${e}`:r),"encodeCell"),S=u((r,e={})=>{var{separator:o,lineEnd:d,quote:n}={separator:",",lineEnd:`\r
`,quote:'"',...e};w(r,"data"),$(o,"separator"),$(d,"lineEnd"),$(n,"quote");var t=new RegExp("["+d+o+n+"]"),p=Array.isArray(r[0])?!1:Object.keys(r[0]),f=p?p.map(h=>b(h,n,t)).join(o)+d:"",y=r.map(h=>(p&&(h=p.map(i=>h?.[i])),h.map(i=>b(i,n,t)).join(o))).join(d);return f+y},"encode"),l=u((r,e={})=>{var{separator:o,lineEnd:d,quote:n,headers:t,trim:p,cast:f,throwLengthNotEqual:y}={separator:x,lineEnd:"",quote:'"',headers:!0,trim:!1,cast:!0,throwLengthNotEqual:!0,...e};$(r,"data"),o!==x&&$(o,"separator"),k(d,"lineEnd"),$(n,"quote"),t!==!0&&t!==!1&&w(t,"headers"),f!==!0&&f!==!1&&w(f,"cast");var h=d||M(n),i=r.match(h);o===x&&(o=j(i));var N=T(o,n);return i=i.map(s=>s.match(N).map(c=>(p&&(c=c.trim()),c[0]===n&&(c=c.slice(1,-1).replaceAll(n+n,n)),c))),t===!0&&(t=i[0],i=i.slice(1)),i.map((s,c)=>{if(t&&t.length!==s.length&&y)throw new g(`line (${c}) of length (${s.length}), expected (${t.length})`);return Array.isArray(f)?s=s.map((a,v)=>{var m=f[v];if(m==="string")return a;if(m==="number")return Number(a);if(a==="true")return!0;if(a==="false")return!1;if(a!=="undefined"){if(a==="null")return null;if(m==="date")return new Date(a);if(m==="json")return JSON.parse(a);throw new g(`undefined casting type (${m})`)}}):f&&(s=s.map(a=>{if(a==="true")return!0;if(a==="false")return!1;if(a!=="undefined"){if(a==="null")return null;var v=Number(a);return Number.isNaN(v)?a:v}})),t&&(s=s.reduce((a,v,m)=>(a[t[m]]=v,a),{})),s})},"decode"),E={encode:S,decode:l};globalThis.$csv=E;var J=E;export{g as CSVError,k as checkstrReg,l as decode,J as default,S as encode};
