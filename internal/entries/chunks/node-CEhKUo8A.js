var c=Object.defineProperty;var h=(f,t)=>c(f,"name",{value:t,configurable:!0});class n{static{h(this,"LiteNode")}constructor(t,i={},s=[],r={}){this.attrs=new Map,this.meta=new Map,this.tag=t,this.classList=new Set(i.class),"class"in i&&(i.class=void 0);for(const e in i)i[e]!==void 0&&this.attrs.set(e,i[e]);this.children=s;for(const e of s)e instanceof n&&(e.parent=this);for(const e in r)this.meta.set(e,r[e])}get childIndex(){return this.parent?.children?.indexOf?.(this)}get nextSibling(){if(!this.parent)return;const t=this.parent.children;return t[t.indexOf(this)+1]}get prevSibling(){if(!this.parent)return;const t=this.parent.children;return t[t.indexOf(this)-1]}append(...t){this.children.push(...t);for(const i of t)i instanceof n&&(i.parent=this);return this}prepent(...t){this.children.unshift(...t);for(const i of t)i instanceof n&&(i.parent=this);return this}insertAt(t,...i){this.children.splice(t,0,...i);for(const s of i)s instanceof n&&(s.parent=this);return this}before(...t){if(!this.parent)return this;const i=this.parent.children;i.splice(i.indexOf(this),0,...t);for(const s of t)s instanceof n&&(s.parent=this.parent);return this}after(...t){if(!this.parent)return this;const i=this.parent.children;i.splice(i.indexOf(this)+1,0,...t);for(const s of t)s instanceof n&&(s.parent=this.parent);return this}remove(){return this.parent&&(this.parent.children=this.parent.children.filter(t=>t!==this)),this.parent=void 0,this}replaceWith(t){if(!this.parent)return this;const i=this.parent.children;return i[i.indexOf(this)]=t,t instanceof n&&(t.parent=this.parent),this.parent=void 0,this}removeChild(t){return this.children[t]instanceof n&&(this.children[t].parent=void 0),this.children.splice(t,1),this}replaceChild(t,i){return this.children[t]instanceof n&&(this.children[t].parent=void 0),this.children[t]=i,i instanceof n&&(i.parent=this.parent),this}removeChildren(){for(const t of this.children)t instanceof n&&(t.parent=void 0);return this.children=[],this}}export{n as L};
